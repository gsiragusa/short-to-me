//go:generate swagger generate spec --scan-models -o ../../public_docs/swagger.json

// Package classification ShortToMe
//
// This API provides methods to create, read and delete shortened URLs.
// The shortened URLs are generated by creating a hash of the timestamp when they are requested the first time and stored on Mongo.
// Following requests for the same URL will return the short url that was previously stored.
// The API also implements a counter of the shortened url redirections. Each time a short URL performs a redirect, the counter is incremented.
//
//
//
//     Schemes: http
//     Host: localhost:8081
//     BasePath: /
//     Version: 1.0.0
//     License: MIT http://opensource.org/licenses/MIT
//     Contact: Giuseppe Siragusa<giuseppe.siragusa85@gmail.com> https://www.linkedin.com/in/gsiragusa/
//
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
// swagger:meta
package main

import (
	"github.com/gsiragusa/short-to-me/api"
	"github.com/gsiragusa/short-to-me/config"
	"github.com/gsiragusa/short-to-me/database"
	"github.com/gsiragusa/short-to-me/server"
	"github.com/gsiragusa/short-to-me/shortener"
	"github.com/sirupsen/logrus"
)

func main() {
	// logger
	lgr := logrus.New()

	// configuration
	conf, err := config.Configure()
	if err != nil {
		lgr.WithError(err).Fatal("unable to load configuration")
	}

	// database
	store, err := database.NewMongoClient(conf)
	if err != nil {
		lgr.WithError(err).Fatal("unable to connect to Mongo")
	}

	// services
	shortenSvc := shortener.NewService(lgr, conf, store)

	// server
	srv := server.New(lgr, conf, api.NewAPI(lgr, conf, shortenSvc))

	if err := srv.ListenAndServe(); err != nil {
		lgr.WithError(err).Fatal("error starting server")
	}
}
