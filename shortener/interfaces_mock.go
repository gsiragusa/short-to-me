// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

package shortener

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	errors "github.com/gsiragusa/short-to-me/errors"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockService) EXPECT() *MockServiceMockRecorder {
	return _m.recorder
}

// ShortenUrl mocks base method
func (_m *MockService) ShortenUrl(ctx context.Context, url string) (string, *errors.Error) {
	ret := _m.ctrl.Call(_m, "ShortenUrl", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ShortenUrl indicates an expected call of ShortenUrl
func (_mr *MockServiceMockRecorder) ShortenUrl(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ShortenUrl", reflect.TypeOf((*MockService)(nil).ShortenUrl), arg0, arg1)
}

// RetrieveUrl mocks base method
func (_m *MockService) RetrieveUrl(ctx context.Context, url string) (string, *errors.Error) {
	ret := _m.ctrl.Call(_m, "RetrieveUrl", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// RetrieveUrl indicates an expected call of RetrieveUrl
func (_mr *MockServiceMockRecorder) RetrieveUrl(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RetrieveUrl", reflect.TypeOf((*MockService)(nil).RetrieveUrl), arg0, arg1)
}

// DeleteUrl mocks base method
func (_m *MockService) DeleteUrl(ctx context.Context, url string) *errors.Error {
	ret := _m.ctrl.Call(_m, "DeleteUrl", ctx, url)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// DeleteUrl indicates an expected call of DeleteUrl
func (_mr *MockServiceMockRecorder) DeleteUrl(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteUrl", reflect.TypeOf((*MockService)(nil).DeleteUrl), arg0, arg1)
}

// CountRedirects mocks base method
func (_m *MockService) CountRedirects(ctx context.Context, url string) (int64, *errors.Error) {
	ret := _m.ctrl.Call(_m, "CountRedirects", ctx, url)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// CountRedirects indicates an expected call of CountRedirects
func (_mr *MockServiceMockRecorder) CountRedirects(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CountRedirects", reflect.TypeOf((*MockService)(nil).CountRedirects), arg0, arg1)
}

// IncrementRedirect mocks base method
func (_m *MockService) IncrementRedirect(ctx context.Context, id string) (string, *errors.Error) {
	ret := _m.ctrl.Call(_m, "IncrementRedirect", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// IncrementRedirect indicates an expected call of IncrementRedirect
func (_mr *MockServiceMockRecorder) IncrementRedirect(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IncrementRedirect", reflect.TypeOf((*MockService)(nil).IncrementRedirect), arg0, arg1)
}

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStore) EXPECT() *MockStoreMockRecorder {
	return _m.recorder
}

// StoreUrl mocks base method
func (_m *MockStore) StoreUrl(ctx context.Context, document interface{}) error {
	ret := _m.ctrl.Call(_m, "StoreUrl", ctx, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUrl indicates an expected call of StoreUrl
func (_mr *MockStoreMockRecorder) StoreUrl(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StoreUrl", reflect.TypeOf((*MockStore)(nil).StoreUrl), arg0, arg1)
}

// FindUrl mocks base method
func (_m *MockStore) FindUrl(ctx context.Context, url string) (*ModelShorten, error) {
	ret := _m.ctrl.Call(_m, "FindUrl", ctx, url)
	ret0, _ := ret[0].(*ModelShorten)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUrl indicates an expected call of FindUrl
func (_mr *MockStoreMockRecorder) FindUrl(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindUrl", reflect.TypeOf((*MockStore)(nil).FindUrl), arg0, arg1)
}

// FindById mocks base method
func (_m *MockStore) FindById(ctx context.Context, id string) (*ModelShorten, error) {
	ret := _m.ctrl.Call(_m, "FindById", ctx, id)
	ret0, _ := ret[0].(*ModelShorten)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (_mr *MockStoreMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindById", reflect.TypeOf((*MockStore)(nil).FindById), arg0, arg1)
}

// DeleteById mocks base method
func (_m *MockStore) DeleteById(ctx context.Context, id string) error {
	ret := _m.ctrl.Call(_m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById
func (_mr *MockStoreMockRecorder) DeleteById(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteById", reflect.TypeOf((*MockStore)(nil).DeleteById), arg0, arg1)
}

// IncrementCount mocks base method
func (_m *MockStore) IncrementCount(ctx context.Context, id string) (*ModelShorten, error) {
	ret := _m.ctrl.Call(_m, "IncrementCount", ctx, id)
	ret0, _ := ret[0].(*ModelShorten)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementCount indicates an expected call of IncrementCount
func (_mr *MockStoreMockRecorder) IncrementCount(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IncrementCount", reflect.TypeOf((*MockStore)(nil).IncrementCount), arg0, arg1)
}
